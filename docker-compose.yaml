version: '3'
services:
  loki:
    image: grafana/loki:3.1.0
    container_name: loki
    ports:
      - 3100:3100
    volumes:
      - ./services/loki/loki-config.yaml:/etc/loki/loki-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    environment:
      - JAEGER_AGENT_HOST=otelcol
    depends_on:
      - minio  

  grafana:
    image: grafana/grafana:11.0.1
    container_name: grafana
    restart: unless-stopped
    ports:
      - 3000:3000
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_SECURITY_ALLOW_EMBEDDING=true
    volumes:
      - ./services/grafana/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - grafana_data:/var/lib/grafana  # Volume persistente para dados do Grafana
      # - ./services/grafana/grafana.ini:/etc/grafana/grafana.ini
    depends_on:
      - loki
      - tempo
      - prometheus

  tempo:
    image: grafana/tempo:2.5.0
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./services/tempo/tempo.yaml:/etc/tempo.yaml
    depends_on:
      - minio
  
  ## Tools
  promtail:
    image: grafana/promtail:2.9.5
    container_name: promtail
    volumes:
      - ./services/promtail/promtail-config.yaml:/etc/promtail/config.yml
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml -config.expand-env=true

  otelcol:
    image: otel/opentelemetry-collector:0.104.0
    container_name: otelcol
    # restart: unless-stopped
    ports:
      - 4317:4317  # otlp grpc
      - 4318:4318  # otlp http
      - 9292:9292 # monitoring
    command: --config=/etc/otelcol/config.yaml
    depends_on:
      - loki
      - tempo
      - prometheus
      - grafana
    volumes:
      - ./services/otelcol/config.yaml:/etc/otelcol/config.yaml

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command: --config.file=/etc/prometheus/prometheus.yml --web.enable-remote-write-receiver
    volumes:
      - ./services/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
  
  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin123
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"  # Console do MinIO
    volumes:
      - minio_data:/data

  minio-init:
    image: minio/mc:latest
    container_name: minio-init
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin123
    entrypoint: >
      /bin/sh -c "
      echo 'Aguardando o MinIO ficar disponÃ­vel...';
      until (echo > /dev/tcp/minio/9000) 2>/dev/null; do
        sleep 2;
      done &&
      mc alias set myminio http://minio:9000 admin admin123 &&
      mc mb myminio/loki &&
      mc mb myminio/tempo &&
      mc mb myminio/mimir
      "
    depends_on:
      - minio
    restart: "no"    

  app:
    image: emr001/java-app-ecs:v1
    container_name: java-app
    environment:
      OTEL_SERVICE_NAME: java-app
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otelcol:4317
      JAVA_TOOL_OPTIONS: "-javaagent:/app/javaagent.jar"
      OTEL_EXPORTER_OTLP_INSECURE: true
      OTEL_LOGS_EXPORTER: "otlp"
      OTEL_METRICS_EXPORTER: "otlp"
      OTEL_TRACES_EXPORTER: "otlp"
      OTEL_PROPAGATORS: "tracecontext,baggage,b3"
    ports:
      - "8080:8080"

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer_ce
    ports:
      - "9002:9000"
      - "9443:9443"
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data    

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local
  portainer_data:
    driver: local   